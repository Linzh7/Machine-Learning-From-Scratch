import numpy as np


class PrebuiltData():
    def Fx(x, a=0, b=3, c=3):
        return a * x**2 + b * x + c

    def MyData(rangeStart=1,
               rangeEnd=100,
               rangeNum=100,
               randomFloat=1,
               a=0,
               b=3,
               c=3):
        data_x = np.linspace(rangeStart, rangeEnd, rangeNum)
        random = np.random.randn(len(data_x))
        data_y = np.array(
            PrebuiltData.Fx(data_x, a, b, c) + randomFloat * random)
        return data_x, data_y

    def MyGivenData():
        data_x = np.array(range(1, 100))
        data_y = [
            3.03, 8.98, 9.76, 17.77, 19.36, 18.02, 21.67, 24.84, 30.06, 31.09,
            33.14, 39.66, 43.24, 43.01, 49.08, 48.67, 51.22, 58.73, 62.35,
            63.37, 66.21, 68.36, 72.58, 77.73, 79.30, 82.41, 84.59, 87.65,
            92.71, 94.14, 98.96, 96.92, 100.49, 103.69, 107.47, 112.30, 112.25,
            119.65, 120.27, 122.58, 126.75, 126.56, 131.66, 135.19, 137.22,
            140.52, 144.36, 148.66, 151.89, 151.59, 154.52, 156.10, 160.59,
            167.87, 169.54, 169.42, 175.30, 176.61, 181.15, 183.19, 187.32,
            188.07, 194.08, 192.35, 195.48, 199.27, 202.93, 208.60, 209.41,
            210.97, 216.89, 216.22, 222.08, 226.80, 225.78, 230.25, 231.79,
            234.64, 242.19, 241.19, 243.91, 246.65, 254.63, 254.22, 260.18,
            261.71, 264.59, 267.76, 268.21, 274.39, 275.98, 280.82, 283.98,
            282.57, 285.02, 288.28, 296.47, 294.98, 299.00
        ]
        return np.array(data_x), np.array(data_y)

    def MyMultivariateGivenData(a=100, b=200, d, e, f):
        data_x = np.append([range(1, a)],
                           [range(2, b, b // a)]).reshape(2, a - 1)
        data_y = np.array(data_x[0] * d + data_x[1] * e +
                          f * np.random.normal())
        return data_x, data_y

    def MyMultivariateGivenData():
        data_x = np.append([range(1, 100)], [range(2, 200, 2)]).reshape(2, 99)
        data_y = [
            15.84, 28.84, 41.84, 54.84, 67.84, 80.84, 93.84, 106.84, 119.84,
            132.84, 145.84, 158.84, 171.84, 184.84, 197.84, 210.84, 223.84,
            236.84, 249.84, 262.84, 275.84, 288.84, 301.84, 314.84, 327.84,
            340.84, 353.84, 366.84, 379.84, 392.84, 405.84, 418.84, 431.84,
            444.84, 457.84, 470.84, 483.84, 496.84, 509.84, 522.84, 535.84,
            548.84, 561.84, 574.84, 587.84, 600.84, 613.84, 626.84, 639.84,
            652.84, 665.84, 678.84, 691.84, 704.84, 717.84, 730.84, 743.84,
            756.84, 769.84, 782.84, 795.84, 808.84, 821.84, 834.84, 847.84,
            860.84, 873.84, 886.84, 899.84, 912.84, 925.84, 938.84, 951.84,
            964.84, 977.84, 990.84, 1003.84, 1016.84, 1029.84, 1042.84,
            1055.84, 1068.84, 1081.84, 1094.84, 1107.84, 1120.84, 1133.84,
            1146.84, 1159.84, 1172.84, 1185.84, 1198.84, 1211.84, 1224.84,
            1237.84, 1250.84, 1263.84, 1276.84, 1289.84
        ]
        return data_x, data_y
